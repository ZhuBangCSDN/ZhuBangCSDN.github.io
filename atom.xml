<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog of Alaga</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-24T16:40:10.408Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>朱邦政</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作系统基础</title>
    <link href="http://yoursite.com/2020/10/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/10/25/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</id>
    <published>2020-10-24T16:33:41.000Z</published>
    <updated>2020-10-24T16:40:10.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程线程协程"><a href="#进程线程协程" class="headerlink" title="进程线程协程"></a>进程线程协程</h2><ul><li>进程是操作系统资源分配的最小单位，有自己独立的地址空间和堆，是程序的一次执行过程，进程也可以看作是程序加上数据加上 PCB 控制块组成。操作系统最开始的时候是只有进程的，后来发现进程的创建和撤销都要涉及到资源的再分配，开销比较大，于是才设计了线程，线程是操作系统调度执行的最小单位，也可以被看作是轻量级进程，一个进程中可以有多个至少有一个线程，它们共享进程的所拥有的资源，有自己的堆栈和局部变量，但是没有单独的地址空间，一个进程死掉所有的线程都会死掉。协程就是比线程更轻量级的存在，就是不受操作系统内核管理，完全由程序控制，也就是在用户态直接执行，不会像线程切换那样消耗资源，好处就是执行效率很高，没有线程切换的开销，然后还不需要锁，因为只有一个线程，所以就不存在同时写变量的冲突，只需要判断状态就行。</li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><ul><li>死锁就是指多个进程在运行过程中因为争夺资源而造成的一种僵局。简单来说就是有两个线程 A 和 B，然后它们互相持有对方需要的资源，并且同时请求对方的资源，然后谁都不放手，然后就形成了死循环，也就是死锁。</li><li>产生死锁有四个必要条件，就是互斥条件，请求和保持条件，不剥夺条件，和循环等待条件。互斥条件就是一个资源任意时刻只能由一个线程占用。请求和保持条件就是一个进程因请求资源阻塞而阻塞的时候，不会释放已获得的资源。不剥夺条件就是线程已获得的资源在未使用完之前不能被其他线程强行剥夺。循环等待条件就是线程和资源之间的一种头尾相接的环形等待关系。</li><li>预防死锁就要从这四个方面下手，首先互斥条件是不能破坏的，因为我们使用锁本来就是要它们互斥，我们可以破坏请求与保持条件，就是一次性把一个线程需要的所有资源都分配好，这里还可以做一些改进，就是在线程使用完分配好的资源后主动释放出去。然后时破坏不可剥夺条件，在请求不到其他资源的时候，主动释放自己的资源。最后是破坏循环等待条件，申请资源按照一个顺序申请，释放资源按照逆序释放。不过这几种方法都会损害系统性能，有一个比较好的方法就是银行家算法，银行家算法就是定义了状态和安全状态，当一个新的进程进入系统的时候，它必须说明需要的每种资源的最大数量，这个数量不能超过系统资源的总和，如果超过了就处于不安全状态，系统不会分配资源，直到其他进程释放足够资源为止。</li><li>解除死锁就俩方法，一个是从其他进程剥夺足够数量的资源给死锁进程，一个是撤销死锁进程或者是撤销代价最小的进程。</li><li>死锁的检测有 Jstack 和 Jconsole 工具。</li></ul><h2 id="进程间通信、线程间通信-同步"><a href="#进程间通信、线程间通信-同步" class="headerlink" title="进程间通信、线程间通信/同步"></a>进程间通信、线程间通信/同步</h2><ul><li>进程间通信有七种方式，分别是管道，命名管道，消息队列，共享内存，信号量，套接字，以及信号。管道是半双工的，也就是数据只能单向流动，只能用于父子进程或者是兄弟进程之间。命名管道也是半双工的方式，但是它允许无亲缘进程之间的通信。消息队列的消息的链表，存放在内核中，由队列 ID 标识。信号量是一个计数器是用于进程间互斥与同步的，可以用来控制多个进程对资源的访问，如果信号量的上限是 1，就成为了一个锁，如果需要在进程之间传递数据还需要结合共享内存来实现</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;进程线程协程&quot;&gt;&lt;a href=&quot;#进程线程协程&quot; class=&quot;headerlink&quot; title=&quot;进程线程协程&quot;&gt;&lt;/a&gt;进程线程协程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进程是操作系统资源分配的最小单位，有自己独立的地址空间和堆，是程序的一次执行过程，进程也可以看作</summary>
      
    
    
    
    <category term="操作系统" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础</title>
    <link href="http://yoursite.com/2020/10/25/Linux%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/10/25/Linux%E5%9F%BA%E7%A1%80/</id>
    <published>2020-10-24T16:33:20.000Z</published>
    <updated>2020-10-24T16:37:08.818Z</updated>
    
    
    
    
    <category term="操作系统" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java基础</title>
    <link href="http://yoursite.com/2020/10/25/Java%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/10/25/Java%E5%9F%BA%E7%A1%80/</id>
    <published>2020-10-24T16:32:59.000Z</published>
    <updated>2020-10-24T16:38:40.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="代理、反射和多态"><a href="#代理、反射和多态" class="headerlink" title="==代理、反射和多态=="></a>==代理、反射和多态==</h3><p>-</p><h3 id="equals-和-和-hashcode"><a href="#equals-和-和-hashcode" class="headerlink" title="==equals 和(==)和 hashcode=="></a>==equals 和(==)和 hashcode==</h3><ul><li>==我们在用的时候，如果比较的是基本数据类型，比较的就是它们的值，如果比较的是引用数据类型，那我们比较的就是对象的的地址是否一致，equals 的话，不能对基本数据类型进行比较，在没有重写 equals 方法的时候其实和==一样，比较的是对象的地址，但是我们可以通过从重写 equals 方法来让它比较两个对象的值，重写 equals 通常有必要重写 hashcode 方法。hashcode 就是把对象的地址通过计算返回一个整数，它是针对散列存储结构的，比如 hashmap、hashset、hashtable 这些，我们比较对象的时候就是先比较它的 hashcode 是否相等，如果相等再进一步判断地址是否相等，如果 hashcode 都不相等，那这两个对象肯定就不相等了。</li></ul><h3 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="==自动装箱和拆箱=="></a>==自动装箱和拆箱==</h3><h3 id="StringBuffer-和-StringBuilder"><a href="#StringBuffer-和-StringBuilder" class="headerlink" title="StringBuffer 和 StringBuilder"></a>StringBuffer 和 StringBuilder</h3><hr><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="ArrayList-和-LinkedList-的区别"><a href="#ArrayList-和-LinkedList-的区别" class="headerlink" title="==ArrayList 和 LinkedList 的区别=="></a>==ArrayList 和 LinkedList 的区别==</h3><ul><li>ArrayList 底层是一个 object 数组，而 LinkedList 是一个双向链表，ArrayList 在知道 index 情况下查询和修改是效率最高的，而 LinkedList 则需要从头到尾遍历节点进行查询，但是在增加和删除的时候，ArrayList 默认是插入到最后一位，如果我们指定了中间的某个位置 ArrayList 就需要开辟新的数组，然后移动把指定插入位置后的元素都往后移一位，然后再插入，开销比较大，而实际上 LinkedList 在插入的时候也只有头插和尾插快，如果是在中间插入的话，还是要一个一个遍历节点找到位置然后插入，开销远比 ArrayList 大，只有它的头插是比 ArrayList 的头插快的多的。除此之外 LinkedList 要消耗更多的空间来存放前驱后继数据等。然后这两个 Collection 都是线程不安全的。</li><li>如果是想要线程安全的话，有一个比较老土的方法是 Vector，它的所有方法都上了锁，实现了同步，一个线程访问 Vector 的时候要进行同步会产生的开销很大，所以现在用的比较少了。</li></ul><hr><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="==HashMap=="></a>==HashMap==</h3><ul><li>HashMap 是我比较常用的一个集合，是由数组加上链表的结构组成的，实际上也可以说它是一个数组，使用了拉链发加上链表来解决哈希冲突的问题。在 java1.7 的时候是数组加上链表，然后使用的是头插法，1.8 的时候改成了数组加上链表加上红黑树的结构，采用的是尾插法。因为使用头插法在 rehash 和 resize 的过程中会出现 null 值得丢失，会出现死循环。1.8 的 HashMap 在链表的长度超过 8 也就是默认阈值的时候会自动转成红黑树，提高了效率。</li><li>HashMap 的扩容机制是这样的，它的默认容量是 16，负载因子是 0.75，当存储的数量达到容量乘上负载因子的时候就会触发扩容，也就是说 16×0.75=12 的时候出触发扩容。扩容的时候就是创建一个新的数组，容量是容量是之前的两倍，再把所有的元素的 Hash 值都重新计算也就是 rehash 的过程，最后放进新的 HashMap 里。</li><li>HashMap 是线程不安全的，如果涉及到线程安全的话，HashTable 和 ConcurrentHashMap 都是线程安全的，但是 HashTable 现在已经基本弃用了，它的所有方法都经过了 synchronized 修饰，它用的是全表锁，就是一把锁锁整张表，如果有一个线程访问的时候，其他线程是不能访问的，只能进入阻塞或者轮询的状态，效率非常低。而 ConcurrentHashMap 在 jdk1.7 的时候采取了分段锁，是由 Segment 和 HashEntry 组成的，Segment 实现了 ReentrantLock，HashEntry 是一个链表结构的元素，整个看起来有点像 HashMap，只不过 Segment 是带了锁的，当我们要对 Entry 里面的元素进行修改时，首先要获得 Segment 的锁。然后在 1.8 的时候 ConcurrentHashMap 就取消了 segment 分段锁，改成了 CAS 加上 synchronized 来实现线程安全，它的数据结构也就变成了数组加链表加红黑树的结构，跟 HashMap 类似，链表长度超过 8 的时候就把链表转化为红黑树，synchronized 锁住了链表或者红黑树的头节点，这样只要不发生 hash 冲突就不会产生并发，效率提高了很多。</li><li>Hash 冲突是指我们在计算 Hash 值的时候可能会出现相同的情况，而 HashMap 采用拉链法解决这种问题，如果计算出 Hash 值重复就判断当前位置的 key 是否相同，如果相同的话就直接覆盖，不同的话再用链表的形式存储。HashMap 长度是 2 的倍数的原因则是 hash 值的范围太大，内存放不下，我们是对其进行取模运算，就是 n-1&amp;hash，这是 HashMap 长度是 2 的倍数的原因。</li></ul><h3 id="Hash"><a href="#Hash" class="headerlink" title="==Hash=="></a>==Hash==</h3><ul><li>Hash 就是一种转换方法，把任意长度的输入通过一定的计算方法转换成固定长度的输出。解决 Hash 冲突的方法有四种，一个是开放定址法，就是为产生冲突的地址求一个地址序列，即把它放到后面的地址上去（线性探测，平方探测，随机探测）一个是 HashMap 里的链表散列法，如果遇到相同的 Hash 地址，就按链表来连接。一个是再哈希，就是重新计算 hash 值直到不冲突为止。还有一个就是计算公共溢出区，把冲突的都放在一个地方，不在表里。</li><li>Hash 的一些使用：涉及到分布式的系统，就会有负载均衡和数据分布的问题。1、Hash 取模，比如有三台服务器，我们要做负载均衡，就可以把请求的用户的 ip 地址计算出 hash 值，然后对 3 取模，余数为几就放到哪台服务器上。缺点就是如果新增了服务器，那所有的绝大多数的请求都要重新映射，变动太大了。2、一致性 Hash，一致性哈希是以 2^32 为除数来取模，从 0 到 2^32-1 来形成一个环。我们先对服务器地址进行 Hash 计算，然后对 2^32 求余，得到它在环中的位置，然后来了一个请求，用同样的方式计算它在环中的位置，然后顺时针找到第一个节点，这个节点就处理这个请求。缺点就是节点数量比较少的时候会出现分布不均匀的情况，解决的办法是在 Hash 环上增加虚拟节点。</li></ul><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="==HashSet=="></a>==HashSet==</h3><ul><li>HashSet 它是一个由 HashMap 支持的容器，它存储唯一元素不允许为空值，并且不保证顺序插入，其实就是一个皮包公司，它对外接活，接到了就丢给 HashMap 处理，可以理解为是 HashMap 的包装，比如它的 add 方法就是基于 HashMap 的 put 方法实现的，只不过 HashMap 是 kv 存储，而 HashSet 是存储对象的，它把对象储存在 HashMap 的 key 上，value 值默认为空，除此之外它的 remove 方法、contains 方法，还有其它的一些方法，都是基于 HashMap 来实现的，因为是把对象存储在 key 上，所以 HashSet 内部的元素是无序的，如果要有序的话可以使用 LinkedHashSet。</li></ul><h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="==CopyOnWriteArrayList=="></a>==CopyOnWriteArrayList==</h3><ul><li>它其实就是运用了写入时复制（CopyOnWrite，简称 COW）思想，就是如果有多个调用者对同一份资源呢进行操作的时候他们会获取相同的指针指向同一份资源，当进行修改时系统会创建一份专用副本给这个调用者，而其他调用者见到的还是初始的资源不变。CopyOnWriteArrayList 在 add 的时候就是，在方法的最前面加了锁，这里用了 ReentrantLock，然后创建副本数组进行操作，这样才能保证只创建单个副本，而读的时候不需要加锁，即便有多个线程进行写操作读到的还是旧数据。它内部有一个用 volatile transient 修饰的数组，一个线程在读取数组的时候总能看到其他数组对这个数组最后的写入，这样就保证了 add 前后的一致性，但是 CopyOnWriteArrayList 也有缺点，缺点在于内存占用比较大，并且只能保证数据的最终一致性，不能保证实时一致性。</li></ul><hr><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h3><ul><li>进程时程序的一次执行过程，它是系统进行资源调度和分配的基本单位，进程的实体是由程序段数据段还有 PCB 块组成的，创建进程实际上就是创建实体对应的 PCB 块，撤销就是撤销 PCB 块。而线程是比进程更小的资源调用单位，也可以说是轻型进程，一个进程中可以拥有多个线程，与进程不同的地方在于线程共享进程的堆和方法区资源，私有自己的程序计数器，虚拟机栈和本地方法栈，线程在切换的时候负担比进程小得多。</li><li>线程的生命周期有六个状态，分别是新建、就绪、运行、阻塞、死亡。</li><li>上下文切换是指 CPU 时间片切换到另一个任务前会先保存自己的状态，以便下次再切换回这个任务是可以再加载这个任务的状态，也就是说任务的保存再到加载的过程就是一次上下文切换。</li></ul><h3 id="synchronized-关键字"><a href="#synchronized-关键字" class="headerlink" title="==synchronized 关键字=="></a>==synchronized 关键字==</h3><ul><li>synchronized 关键字是 JVM 层面的操作，它修饰实例方法的时候锁住的是一个对象，修饰静态方法和代码块的时候锁住的是当前类。synchronized 同步语句块用的是 monitorenter 和 monitorexit 指令，两个分别指向代码块的头和尾，线程试图获取锁其实就是试图获取 monitor 对象，monitor 对象存在于每个 java 对象的对象头中，如果锁计数器为 0，执行 monitorenter 指令的时候锁计数器会置 1，这时候其他线程试图获取就会失败，当我们执行到 monitorexit 指令的时候，锁计数器就会置 0，表示锁被释放。synchronized 同步方法的时候用的是 ACC_SYNCHRONIZED 标识，它告诉 JVM 这个方法是不是一个同步方法，然后再执行相应的同步操作。</li><li>在 jdk1.6 的时候 synchronized 进行了优化，引入了偏向锁、轻量级锁、自旋锁、重量级锁这些，最开始的时候资源是无锁状态，当出现第一个线程要获取锁的时候锁就会升级为偏向锁，偏向于这个线程，意思就是在没有被其他尝试获取的时候取消同步。如果出现锁竞争比较激烈的情况，每次持有锁的线程可能都不一样，那锁就会升级为轻量级锁，轻量级锁是采用了 CAS 操作来替代互斥量。如果轻量级锁失败以后，为了避免线程在操作系统层面挂起，还加入了一层锁自旋的手段，就是争夺锁的线程进入忙循环的状态，因为一般线程持有锁的时间不会太长，所以让进行一个原地自旋等待能减小开销，但是如果超过一定的自旋次数还没获得，锁就会升级为重量级锁了，因为长时间的原地自旋对 CPU 也是一种消耗，这个升级的过程是不可逆的。</li><li>自适应自旋就是根据上一次锁的自旋时间和拥有者的状态来决定这次的自旋时间，锁消除就是 JVM 在编译的时候检测到共享数据不存在竞争了，就把锁给消除。</li><li>它和 ReentrantLock 的区别：两者都是可重入锁，就是自己可以再次获取自己内部的锁，获取之后锁计数器会再次加一，释放了减一，一直到锁计数器为零了算是完全释放。synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API，也就是说 ReentrantLock 是 JDK 层面实现的，需要 lock 和 unlock 来手动实现，而 synchronized 则是自动释放。除此之外还有一个就是 ReentrantLock 增加了一些新的功能，比如等待可中断，也就是说等待的线程可以选择放弃等待改为处理其他事情。可实现公平锁，它可以指定锁是公平锁还是非公平锁，而 synchronized 只能是非公平锁，公平锁就是先等待的线程先获取锁。可实现选择性通知，就是 ReentrantLock 可以在 Condition 里指明要通知的线程对象，而 synchronized 则是在 notify 和 notifyall 的时候通知的对象由 JVM 选择。</li></ul><hr><h3 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="==volatile 关键字=="></a>==volatile 关键字==</h3><ul><li>volatile 关键字修饰的变量能保证对不同线程的可见性，它越过了本地内存，直接将变量写入主存中，读取也是直接从主存中读取。因为我们知道 java 的内存模型里，线程和主存之间还存在一个工作内存，如果一个线程在主存中修改了一个变量，而另一个线程还在使用这个变量在本地内存中的拷贝，就会造成数据的不一致，所以 volatile 关键字很好地解决了这种问题。它还有一个作用就是防止指令重排。但是 volatile 只能保证单词读写的原子性，对于 i++这样的操作不能保证它的原子性，要解决这个问题我们可以使用锁或者是原子类。volatile 关键字的底层是对总线上传输的数据不断进行嗅探和 CAS 循环，如果大量使用 volatile 可能会引起总线风暴。</li><li>总线嗅探：这个要从缓存一致性原则说起，因为 CPU 和主存之间我们设置了多级缓存，而 CPU 操作的是缓存中的数据，这就有可能会出现多个 CPU 操作的缓存数据不一致的情况，因此设置了缓存一致性原则，就是每个处理器不断对总线上传播的数据进行嗅探，来检查自己的数据是不是过期了，如果发现缓存行对应的内存地址不一致，就会将缓存行置为无效，要操作这个数据时会从主存中重新读取。</li><li>禁止指令重排：JVM 会对指令进行重排序，在不改变程序结果的情况下提高效率，遵守 as-if-serial 原则（不管怎么重排序，单线程下的执行结果不能被改变）。而 volatile 关键字实现禁止指令重排是通过插入内存屏障的方式，volatile 写是分别在指令前后加上内存屏障，读是在后面加上两个。<br>-happens-before 原则：一个操作 happens-before 于另一个操作那么第一个操作的结果将对第二个操作可见，如果两个操作之间存在 happens-before 关系，那么如果出现指令重排后的结果和 happens-before 一样，那么这种重排是允许的。</li></ul><hr><h3 id="CAS"><a href="#CAS" class="headerlink" title="==CAS=="></a>==CAS==</h3><ul><li>CAS 就是字面上的意思，compare and swap ，它有三个操作数，内存地址 V，旧的预期值 A 和新的目标值 B，当我们在进行 CAS 操作的时候，会比较内存地址 V 里面的值和旧的预期值 A 是否相等，如果相等就可以把 V 里面的值修改为 B，否则就什么都不做。它存在了一些问题，比如我们通常将 CAS 搭配循环来使用，循环时间长了 CPU 的开销会很大。还有就是只能保证一个变量的原子性，还有一个就是 ABA 问题，就是比如我在内存地址 V 中初次读取到的值为 A，准备赋值的时候检查到它的值还是为 A，但是实际上在这个中间它被修改过又改回来了，这样我们是检查不到的，解决这个问题的办法可以是加上一个标识符或者版本号来解决。</li></ul><hr><h3 id="synchronized-和-volatile-的区别"><a href="#synchronized-和-volatile-的区别" class="headerlink" title="==synchronized 和 volatile 的区别=="></a>==synchronized 和 volatile 的区别==</h3><ul><li>volatile 关键字只能用于变量 synchronized 可以用在方法和代码块上。多线程访问 volatile 不会发生阻塞，synchronized 就会。还有就是 volatile 能保证数据的可见性，但不能保证原子性，synchronized 两个都能保证。</li></ul><hr><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="==ThreadLocal=="></a>==ThreadLocal==</h3><ul><li>ThreadLocal 就是线程专属本地变量，就是说如果我创建了一个 ThreadLocal 变量，那每一个访问这个变量的线程都会有这个变量的本地副本，并且通过 get 和 set 方法来获取或设置。它的底层原理是我们的 ThreadLocal 内部存在一个 ThreadLocalMap 静态内部类，它类似于 HashMap，我们存储的 key 是当前的 ThreadLocal 对象，值是我们想要存储的任意值，Thread 对象保持着对 ThreadLocalMap 的弱引用。ThreadLocal 存在一个内存泄漏的问题，因为我们设置的 key 是 ThreadLocal 的弱引用，而 value 是强引用，在我们的 ThreadLocal 没有被外部强引用的情况下 GC 的时候 key 就会被清理，留下 key 为 null 的 value，无法被访问，这时候就出现了内存泄漏。ThreadLocalMap 其实考虑了这种情况，在调用 set、get、remove 方法的时候就会清理掉 key 为 null 的记录，不过还是在使用完 ThreadLocal 后手动调用一个 remove 方法比较好。</li><li>为什么是弱引用？因为如果 ThreadLocalMap 持有 ThreadLocal 的强引用，如果 ThreadLocal 的对象回收了，如果我们不手动删除，ThreadLocal 仍然不会被回收这里就出现了内存泄漏。而如果是弱引用，ThreadLocal 的对象被回收了，留下了 key 为 null 的 value，这里就出现了内存泄漏，但是两者不同的地方在于，因为 ThreadLocalMap 生命周期和 Thread 一样长，强引用如果不手动删除就会一直存在，而弱引用多了一层保障，就是在我们下次调用 set、get、remove 的时候就会清除。</li></ul><hr><h3 id="线程池"><a href="#线程池" class="headerlink" title="==线程池=="></a>==线程池==</h3><ul><li>线程池好啊，它是管理线程的一种手段，通过重复利用已创建的线程来降低创建和销毁线程的损耗，提高响应速度还对线程进行统一的分配和监控。它有三个比较重要的参数，一个是核心线程数，一个是最大线程数，一个是缓冲队列。它的线程复用是通过重写 Thread 类，在 start 方法里不断循环调用传过来的 Runnable 对象来实现线程的复用。它的工作过程是，当我们调用 excute 方法添加一个任务时，如果这时的任务书小于核心线程数，那就马上创建线程运行这个任务，如果大于核心线程数，就把它放进缓冲队列里，如果缓冲队列满了，但小于最大线程数，那就创建非核心线程来执行，如果超过了最大线程数就会抛出拒绝添加的异常了，在线程池完成所有工作后，它最终会收缩到核心线程数的大小。</li><li>拒绝策略吗？我了解的不多，知道一个是丢弃最老的一个请求，一个是默默丢弃无法处理的请求，还有一个是直接抛出异常。</li><li>缓冲队列吗？我记得常用的有两个，一个是 LinkedBlockingQueue，它是无界的，可能会内存溢出。一个是 ArrayBlockingQueue，有界的，通过加锁保证安全，队列不满就唤醒。</li><li>线程池参数设置：根据三个参数来判断，一个是 tasks（每秒需要处理的最大任务数量），一个是 tasktime（单线程执行任务耗时），一个是 responsetime（系统允许任务的最大响应时间），举个例子就是比如我有 100 到 1000 个任务，每个人物的 tasktime 是 0.1 秒，那我就需要 10 到 100 个线程，那么我的核心线程数（corePoolSize）就设置为 10 个，具体数字还有个 8020 原则，就是 80%的情况下每秒任务数，就是看 80%的情况下每秒任务数是多少，如果是 200，那 corePoolSize 就设置成 20。然后第二个就是缓冲队列的长度，长度是根据你的核心线程数来设定的，比如刚才算出来的 corePoolSize 是 20，那就用 20/0.1 再*2，就是 400，最后一个就是最线程数，最大线程数就是用刚才最大的 1000 个任务减去缓冲队列的 400 个再乘上 0.1，就是 60 个。keepalivetime 可以根据任务峰值持续时间来设定。</li></ul><hr><h3 id="AQS"><a href="#AQS" class="headerlink" title="==AQS=="></a>==AQS==</h3><ul><li>AQS 是 AbstractQueuedSynchronizer，是一个构建锁和同步器的框架，内部是一个 volatile 修饰的 state 变量和一个 FIFO 队列，然后很多并发类比如 ReentrantLock、CountDownLatch、CyclicBarrier 都是基于它实现的，比如 ReentrantLock，它把 state 初始化为 0，表示为未锁状态，一个线程 lock 时调用 tryAcquire 方法独占这个锁并将 state+1，然后其他线程再 tryAcquire 的时候就会失败，直到 unlock 到 state=0。其他两个我就没有深入看过了。</li></ul><hr><h2 id="JVM"><a href="#JVM" class="headerlink" title="==JVM=="></a>==JVM==</h2><h3 id="Java-内存"><a href="#Java-内存" class="headerlink" title="==Java 内存=="></a>==Java 内存==</h3><ul><li>Java 的内存空间分为五个部分，分别是堆，方法区，程序计数器，虚拟机栈，本地方法区。堆和方法区是线程共享的，虚拟机栈，程序计数器，本地方法区是线程私有的。堆存放我们的对象以及数组，方法区放的是我们的类信息、常量（static final）、静态变量（static）。程序计数器是线程的字节码解释器，它取出指定指令地址中的指令来执行，然后指向下一条地址，虚拟机栈中有我们的局部变量表、操作数栈、动态链接、方法出口等，局部变量表主要存放了我们的八种基本数据类型（short,int,long,float,double,char,boolean,byte）以及对象引用。</li></ul><hr><h3 id="Java-类加载过程"><a href="#Java-类加载过程" class="headerlink" title="==Java 类加载过程=="></a>==Java 类加载过程==</h3><ul><li>类的加载过程是加载，验证，准备，解析，初始化，卸载，这个过程中我们还用到一个双亲委派原则，就是当类加载器收到一个类加载请求的时候，它首先会把这个请求交给父类加载器，如果父类加载器处理不了才会自己尝试加载。</li><li>Java 的类加载器有，最顶层是 Bootstrap ClassLoader，这是虚拟机识别的类库用户无法直接使用，然后是 Extension ClassLoader 用户可以使用，然后是 Application ClassLoader，负责的是用户路径中的所有类库，如果用户没有自定义加载器那就默认使用这个，最后才到自定义类加载器。自定义类加载器的原因是系统加载器只加载指定目录下的 class 文件，如果想加载自己定义的 class 文件就可以自己定义一个。</li></ul><hr><h3 id="Java-对象创建的过程"><a href="#Java-对象创建的过程" class="headerlink" title="==Java 对象创建的过程=="></a>==Java 对象创建的过程==</h3><ul><li>==类加载检查==到==分配内存==到==初始化零值==到==设置对象头==到执行==init 方法==</li><li>首先是类加载的过程，JVM 遇到一条 new 指令时首先会去检查这个指令的参数能不能在常量池中定位到这个类的符号引用，并且检查这个类有没有被加载解析初始化过，如果没有就要执行相应的加载过程。</li><li>然后是分配内存，在堆的新生代里划分一块内存给新生的对象，分配方法有指针碰撞法和空闲列表法。</li><li>然后是初始化零值，JVM 将分配到的内存空间都初始化为零值。</li><li>然后设置对象头，对象头包括了 Mark Word，Klass Point，Monitor，Mark Word 里有对象的 HashCode，分代年龄还有锁标志位信息，Klass Point 是指向类元数据的指针，Monitor 就是之前说的 synchronized 方法操作的地方。</li><li>最后就是执行 init 方法，把对象按照我们的写法初始化。</li></ul><hr><h3 id="JavaGC"><a href="#JavaGC" class="headerlink" title="==JavaGC=="></a>==JavaGC==</h3><ul><li>从 GC 的角度我们的堆还分为新生代和老年代，新生代还分为 eden、servivorFrom、servivorTo，Eden 是 Java 新对象的初始地带，如果对象比较大就会直接进入老年区，当 Eden 区不够的时候就会触发一次 MinorGC，结束之后如果对象还存活就会进入到 servivorFrom 或者 servivorTo 区，同时年龄加一，当年龄增加到一定程度之后就会进入老年区了。老年区存放的是比较稳定生命周期比较长的对象，老年区空间不够了就会触发 MajorGC。最后还有一个就是永久代，永久代存放的就是类和元数据信息，永远不会被 GC。</li><li>GC 通过两种方法确定垃圾，一个是引用计数法一个是可达性分析法，引用计数法就是给对象添加一个引用计数器，每当有一个地方引用他计数器就加一，引用失效就减一，当计数器为零就是可以回收的对象了。而可达性分析法就是从 GCRoot 节点出发一直到我们的对象，走过的路径就是引用链，如果对象到 GCRoot 没有一条引用链就说明这个对象是可回收的。</li><li>确定了垃圾之后就是回收算法，JVM 主要有三种回收算法，一个是标记清除算法，就是把需要回收的对象打上标记，然后回收，缺点是碎片化比较严重，复制算法是 MinorGC 用的，它是把内存划分为等大小的两块，每次只用其中一块，当内存空间满了之后就把存活对象复制到另一块上区，然后把这一块全都清除，问题就是可用内存变为了原来的一半。标记整理算法是标记可回收对象，然后让所有存活对象向一端移动，然耨清理掉端以外的内存。</li><li>对象引用有四种，强引用，软引用，弱引用，虚引用，一个对象如果具有强引用，它就不可被回收，如果具有的是软引用，那在内存空间足够的时候，它不会被回收，如果内存空间不足了，它就会被回收。而弱引用是存活的时间更短一点，如果被垃圾回收器扫描到，就会被回收。虚引用基本就跟没有一样，任何时候都有可能被回收。</li></ul><hr><h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="==垃圾收集器=="></a>==垃圾收集器==</h3><p>垃圾收集器了解的不多，只知道</p><ul><li>CMS 收集器，CMS 收集器采用多线程标记清除算法，分为四个阶段，首先是初始标记阶段，这个阶段很快，只是标记一下 GCRoot 可达对象，但是会暂停所有工作线程，然后时并发标记阶段，这个过程是进行 GCRoots 跟踪，能和用户线程一起工作，重新标记阶段，对并发标记阶段的记录进行修正，最后是并发清除，和用户线程一起工作，清除不可达对象。</li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;h3 id=&quot;代理、反射和多态&quot;&gt;&lt;a href=&quot;#代理、反射和多态&quot; class=&quot;headerlink&quot; title=&quot;=</summary>
      
    
    
    
    <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
    <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://yoursite.com/2020/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93MySQL/"/>
    <id>http://yoursite.com/2020/10/24/%E6%95%B0%E6%8D%AE%E5%BA%93MySQL/</id>
    <published>2020-10-24T09:46:04.000Z</published>
    <updated>2020-10-24T16:26:34.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL-是什么？"><a href="#MySQL-是什么？" class="headerlink" title="MySQL 是什么？"></a>MySQL 是什么？</h2><p>一个关系型数据库。</p><hr><h2 id="数据库的三范式"><a href="#数据库的三范式" class="headerlink" title="数据库的三范式"></a>数据库的三范式</h2><ul><li>第一范式（1NF）：数据库表的每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。<strong><em>解释</em></strong>：列不可分。<br>第二范式（2NF）：在第一范式的基础上，要求实体的属性完全依赖于主关键字。<strong><em>解释</em></strong>：不能部分依赖。即：一张表存在组合主键时，其他非主键字段不能部分依赖。<br>第三范式（3NF）：在第二范式的基础上，要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。<strong><em>解释</em></strong>：不能存在传递依赖。即：除主键外，其他字段必须依赖主键。</li></ul><hr><h2 id="数据库的索引"><a href="#数据库的索引" class="headerlink" title="数据库的索引"></a>数据库的索引</h2><ul><li>数据库的索引其实就是为了让数据库查询更快的一种排好序的数据结构。分为普通索引、唯一索引、主键索引、聚合索引、全文索引。<ul><li>普通索引没有什么限制，是基本的索引类型，仅起到加速查询的作用。</li><li>唯一索引不允许两行有相同的索引值，一张表中可以有多个唯一索引。</li><li>主键索引是一种特殊的唯一索引，一张表中只能有一个主键索引。</li><li>联合索引是可以覆盖多个数据列的索引。</li><li>全文索引是把一个大文本段当作一个索引。<br><strong>以上几种索引的区别：</strong><br><strong>主键索引和普通索引</strong>：主键索引在 B+树上的叶子节点存放的是整行数据，而普通索引的叶子节点存放的是主键的值，主键索引我们直接搜寻 B+树就可以得到，但普通索引我们得到了主键的值以后还要回表再搜寻一次，效率比较低。<br><strong>主键索引和唯一索引</strong>：一张表中只能有一个主键索引，可以有多个唯一索引。主键索引不可以为空，唯一索引可以为空。</li></ul></li></ul><hr><h2 id="数据库的引擎"><a href="#数据库的引擎" class="headerlink" title="数据库的引擎"></a>数据库的引擎</h2><ul><li>MySQL 引擎分为<strong>MYISAM</strong>和<strong>InnoDB</strong>，在 mysql-5.1 版本之前默认引擎是 MyISAM，5.1 之后是 innoDB。<br><strong>二者区别：</strong><ul><li>MYISAM：不支持外键、事务和 MVCC，使用表锁，查询表行数的时候不需要全表扫描。</li><li>InnoDB：支持外键、事务和 MVCC，使用行锁，查询表行数的时候需要全表扫描。</li><li>这两个的区别除了上面说的几个以外还有索引方面的区别，InnoDB 的数据文件本身就是索引文件，它的辅助索引 data 域存储的是主键的值而不是地址，而 MYISAM 的索引和数据文件是分开的，辅助索引和主索引没多大区别。</li></ul></li></ul><hr><h2 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h2><ul><li>InnoDB 用的数据结构是 B+树，它是由 B 树优化而来的。<ul><li><strong>B+树的构造</strong>：B+树的非叶子节点上不保存指向关键字的指针，仅仅作为索引，因此能容纳的关键字数量就更多，树的高度就比 B 树更矮，然后我们磁盘 IO 的效率就更高。它的叶子节点上保存了所有父节点关键字的指针，叶子节点根据关键字的大小从小到大排列，叶子节点之间存在指针指向下一个节点，相当于一个有序链表，对 B+树进行查找相当于二分查找，时间复杂度相对稳定，是 logn，无论是否成功，都要经历从根节点到叶子节点的路径。</li><li><strong>B+树和 B 树的区别</strong>：<br>1、B 树的每个节点都存储数据，非叶子节点存储关键字和指向关键字的指针，如果要存储大量的数据那树的高度就会上来，效率就变低了。<br>2、B 树的查询是要遍历每一层的节点，如果我们要查询的信息离根节点很近，那时间复杂度就很低，可能是 O（1），如果很远，那就是 O（n）了。<br>3、而 B+树的叶子节点保存了所有信息，非叶子节点作为索引不保存指向关键字的指针，因此能容纳更多的关键字，树的高度就更矮，磁盘 IO 次数就更少。它的叶子节点根据关键字的大小从小到大排列，并且叶子节点之间还有指向下一个节点的指针，查询的时候相当于对叶子节点进行遍历，在非叶子节点的帮助下我们的查询效率相当于二分查找，相对稳定，是 O（logn）。</li></ul></li></ul><hr><h2 id="数据库的事务"><a href="#数据库的事务" class="headerlink" title="数据库的事务"></a>数据库的事务</h2><ul><li>A 是 Atomicity 原子性，原子性就是事务应该是一个不可分割的工作单位，事务中的操作要么都执行要么都不执行</li><li>C 是 Consistency 一致性，事务前后数据的完整性都保持一致。</li><li>I 是 Isolation 隔离性，是指事务并发的时候相互隔离互不干扰。</li><li>D 是 Durability 持久性，指事物提交后对数据的操作应该是永久性的。</li></ul><hr><h2 id="数据库的隔离级别"><a href="#数据库的隔离级别" class="headerlink" title="数据库的隔离级别"></a>数据库的隔离级别</h2><ul><li>数据库的隔离级别有四种，从一致性低到高（并发性从高到低）为<ul><li>读未提交</li><li>读已提交</li><li>重复读</li><li>串行化<br>不考虑隔离级别的话会导致脏读、不可重复读和幻读的出现。<br>脏读就是一个事物读到了其他事务未提交的数据，也就是脏数据。不可重复读就是指一个事物多次查询同一个数据得到的结果是不同的，因为被其他事务修改过，幻读是也是读到了其他事物处理过的数据，但是和不可重复读的地方在于幻读针对是一批数据集合。</li></ul></li></ul><hr><h2 id="SQL-调优"><a href="#SQL-调优" class="headerlink" title="SQL 调优"></a>SQL 调优</h2><p>1、最基本的是表要有主键，有主键的表 MySQL 会创建聚簇索引，聚簇索引有一个好处就是主键和数据行是在一起的，你在 explain 查询的时候会发现它的 type 级别是 constant，这是很高的一种级别。<br>2、当有主键的时候一条 SQL 语句查询很慢可以查看它是否建立了相应的索引，索引的选择可以尽量是 where、orderby、groupby 以及 join 后面的字段作为索引列，并且这些索引列要排个序，符合最左匹配原则（最左优先，以最左边的为起点任何连续的索引都能匹配上。同时遇到范围查询(&gt;、&lt;、between、like)就会停止匹配）<br>3、另外呢就是你选的时候要根据它们的索引选择器，你的非重复数据行和重复数据行间的排列，大的放左小的放右的形式，然后这种多列的形式尽量去建立联合索引而非多个单个索引。<br>4、如果数据查询比较频繁，就可以使用覆盖索引。关于索引没有生效的问题，也可以考虑一下 MySQL 底层是不是出了什么问题，因为它底层是一个随机采样的过程，它会根据你的索引基数采样，但是它不可能给你全部标记上，它会根据随机采样来计算你的索引选择，有可能它采错了，虽然你的索引选择性比较大，但是它可能认为你的选择性比较小，然后就出错了，对于这种情况一般是用 force index 让它强制走看它行不行，如果不行的话就要刷新一下它的信息了用 analyze table 看它有没有重新走对。</p><hr><h2 id="数据库死锁"><a href="#数据库死锁" class="headerlink" title="数据库死锁"></a>数据库死锁</h2><ul><li><strong>现象</strong>：程序在执行的过程中，点击确定或保存按钮，程序没有响应，也没有出现报错。<br><strong>场景</strong>：当对于数据库某个表的某一列做更新或删除等操作，执行完毕后该条语句不提交，另一条对于这一列数据做更新操作的语句在执行的时候就会处于等待状态，此时的现象是这条语句一直在执行，但一直没有执行成功，也没有报错。<br><strong>原因</strong>：<br>1、<strong><em>事务之间对资源访问顺序的交替</em></strong>：一个用户 A 访问表 A（锁住了表 A），然后又访问表 B；另一个用户 B 访问表 B（锁住了表 B），然后企图访问表 A；这时用户 A 由于用户 B 已经锁住表 B，它必须等待用户 B 释放表 B 才能继续，同样用户 B 要等用户 A 释放表 A 才能继续，这就死锁就产生了。<br>这种死锁比较常见，是由于程序的 BUG 产生的，除了调整的程序的逻辑没有其它的办法。<br>2、<strong><em>并发修改同一记录</em></strong>：用户 A 查询一条纪录，然后修改该条纪录；这时用户 B 修改该条纪录，这时用户 A 的事务里锁的性质由查询的共享锁企图上升到独占锁，而用户 B 里的独占锁由于 A 有共享锁存在所以必须等 A 释放掉共享锁，而 A 由于 B 的独占锁而无法上升的独占锁也就不可能释放共享锁，于是出现了死锁。<br>这种死锁的解决办法一般是通过乐观锁来解决，通过加一个版本号（Version）来实现。<br><strong>定位</strong>：select username,<strong>lockwait</strong>,status,machine,program from v$session where sid in (select session_id from v$locked_object)<br><strong>解决</strong>：一般情况下只需要将死锁的语句提交就好了，但是如果定位不到语句的话把程序关闭重启就好</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MySQL-是什么？&quot;&gt;&lt;a href=&quot;#MySQL-是什么？&quot; class=&quot;headerlink&quot; title=&quot;MySQL 是什么？&quot;&gt;&lt;/a&gt;MySQL 是什么？&lt;/h2&gt;&lt;p&gt;一个关系型数据库。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;数据库的三范式&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络总结</title>
    <link href="http://yoursite.com/2020/10/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/10/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%80%BB%E7%BB%93/</id>
    <published>2020-10-20T04:44:46.000Z</published>
    <updated>2020-10-24T04:46:38.586Z</updated>
    
    <content type="html"><![CDATA[<p><em>计算机网络的知识浩瀚如海，迫于时间没能够一本一本细读，只在有需要的时候才翻阅查找，现做个笔记总结一下常见的知识</em></p><h2 id="TCP-IP-协议结构"><a href="#TCP-IP-协议结构" class="headerlink" title="TCP/IP 协议结构"></a><strong>TCP/IP 协议结构</strong></h2><ul><li>TCP/IP 为分为四层协议，从顶层到底层分别为：<ul><li>应用层：<ul><li>Http（超文本传输协议）</li><li>DNS（域名系统）</li><li>Telnet（远程登陆协议）</li><li>FTP（文件传输协议）</li><li>TFTP（简单文件传输协议）</li><li>SMTP（简单邮件传输协议）</li><li>SNTP（简单网络时间协议）</li></ul></li><li>传输层<ul><li>TCP（传输控制协议）</li><li>UDP（用户数据报协议）</li></ul></li><li>网络层<ul><li>IP（IPv4、IPv6）</li><li>ICMP（Internet 控制报文协议）</li><li>RIP（路由信息协议）</li><li>ARP（地址解析协议）</li><li>RARP（逆向地址解析协议）</li></ul></li><li>网络接口层<ul><li>Ethernet（以太网）</li><li>IEEE 802.3</li></ul></li></ul></li></ul><hr><p><strong>接下来会自顶向下介绍，可能会有缺漏，但尽可能完善</strong></p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h3><ul><li>Http 是超文本传输协议，基于 TCP 传输。有时也基于 TLS/SSL，那就是 Https。<ul><li><strong>Http 连接的过程（浏览器输入 url 之后的过程）</strong><br>1、DNS 解析找到域名对应的 IP 地址<br>2、TCP 三次握手建立连接<br>3、客户端发送 Http 请求<br>4、服务端处理请求并返回响应报文。<br>5、客户端处理报文，浏览器解析并渲染页面，连接结束。</li></ul></li><li><strong>Http 结构</strong>：<ul><li><strong>Http 请求结构</strong>：<br>请求行：请求方法 URL 协议版本<br>请求头：头部字段名 值<br>空行<br>请求数据</li><li><strong>Http 响应结构</strong>：<br>状态行<br>消息报头<br>空行<br>响应正文</li></ul></li></ul><h3 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h3><ul><li>DNS 解析又叫域名解析，分为递归和迭代两种，通常我们见到的是递归和迭代复合使用的方式。过程如下：<br>比如我们输入“<a href="http://www.baidu.com”" target="_blank" rel="noopener">www.baidu.com”</a><br>1、浏览器输入一个 url 之后，先在自身的缓存中查询有没有被解析过的域名对应的 ip 地址，如果有就返回。<br>2、如果浏览器没有命中，就会到本地操作系统的缓存中查询，在 C 盘的 hosts 文件中，如果有就返回。<br>3、如果本地缓存也没有命中，就会像本地域名解析系统（LDNS）发出请求，如果解析成功就返回。<br>4、如果 LDNS 没有命中，则向根服务器（Root Server）发出请求，Root Server 会返回一个顶级域名服务器的地址。（如 com）<br>5、LDNS 收到以后向这个顶级域名服务器继续发出请求，顶级域名服务器收到以后解析，并返回二级域名服务器（Name Server）地址（如 baidu）<br>6、LDNS 缓存这个域名和对应的 ip，并把结果返回给浏览器，浏览器和操作系统都保存在缓存中，解析结束。</li></ul><p>上面这个过程包括了递归和迭代，递归和迭代的区别在于查询的递交者是否改变，递归改变，迭代不变。所以可以看到 1-3 的步骤中是递归查询，4-6 的步骤是迭代查询。当然 DNS 解析也有纯递归和纯迭代，效率可能就没有这种组合的方式高，所以我就不举例了。</p><h3 id="DNS-用的是-TCP-还是-UDP"><a href="#DNS-用的是-TCP-还是-UDP" class="headerlink" title="DNS 用的是 TCP 还是 UDP"></a>DNS 用的是 TCP 还是 UDP</h3><ul><li><p>在域名解析的时候使用的是 UDP 协议，在区域传输的时候用的是 TCP 协议。<br>域名解析：<br>1、因为 TCP 是面向连接的协议，如果 DNS 使用 TCP，那么每次 DNS 交易都要加上 TCP 三次握手的时间，倘若我们访问一个冷门的网站，LDNS 迭代查询多少个服务器就要多花多少个三次握手的时间。所以我们选择了使用 UDP。<br>2、当然，UDP 也有缺点，由于历史的原因，互联网物理链路上的的最小 MTU 为 576，基于 UDP 传输的 DNS 为了限制报文不超过 576，把 DNS 报文限制在了 512 字节。<strong>如果我们传输超过 512 字节的报文（例如 1000 个字节），UDP 就会截断成 512 字节，后面的 488 字节会被丢弃</strong>。原因是 DNS 没有字段来识别报文 ID，默认只有一个报文，所以多出来的只能被抛弃，所幸的是域名解析传输的报文很小，一般不会超过。<br>当然，由于 UDP 只能传输 512 字节无法携带证书，这就带来了不安全性，我们常见的<strong>DNS 劫持</strong>就是因此产生，DNS 劫持就是攻击 DNS，或者是伪造 DNS 服务器，给客户端返回错误的 ip 地址。<br>3、当然，用上 TCP 就可以安全一点，因为 TCP 可以携带大量的数据，你可以放进签名和证书，就能保证相对的安全，只不过又要考虑上面说到的时间损耗。目前国际上应该用的是 UDP 比较多，DNS 劫持的问题交给服务端和客户端去处理。</p><p>区域传输：<br>1、DNS 的规范规定了 2 种类型的 DNS 服务器，一个叫主 DNS 服务器，一个叫辅助 DNS 服务器。在一个区中主 DNS 服务器从自己本机的数据文件中读取该区的 DNS 数据信息，而辅助 DNS 服务器则从区的主 DNS 服务器中读取该区的 DNS 数据信息。（有点类似于数据库的主从复制）当一个辅助 DNS 服务器启动时，它需要与主 DNS 服务器通信，并加载数据信息，这就叫做区域传输（zone transfer）。<br>2、而由于以下原因，区域传输选择了使用 TCP：</p><ul><li>辅域名服务器会定时（一般时 3 小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，则会执行一次区域传送，进行数据同步。因为数据同步传送的数据量比一个请求和应答的数据量要多得多，因此使用的是 TCP 而不是 UDP。</li><li>TCP 是一种可靠的连接，保证了数据的准确性。</li></ul></li></ul><hr><ul><li>最后简单介绍一下 DNS 劫持和 Http 劫持，简单的来说 DNS 劫持就是你输入了 google 的 url，结果浏览器弹出来了百度的页面。而 Http 劫持则是你在笔趣阁看更新的小说，结果右下角一直弹出澳门皇家赌场的广告。<br>DNS 劫持预防：<br>1、如果是个人的话倒是没有预防的必要了（劫持一般面向大型网站，无差别攻击，大家都一样，一般不会特意针对你）。如果被劫持了，可以手动修改 DNS 地址，也可以修改路由器密码。<br>2、如果是公司的话就有必要了，一是可以做个网站监控工具，时刻监控域名有没有被劫持。二是准备多个备用域名，如果首选域名被劫持就换上备用的。三是找网安专家。</li></ul><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><ul><li>TCP 又称传输控制协议，是面向连接的协议。首先我们可能经常在网上看到，TCP 头部有 20 个字节，UDP 头部有 8 个字节，但是一直不清楚怎么来的，TCP 头部那张图也很复杂看不懂，接下来我就解释一下，TCP 头部从上到下依次为。<ul><li>16 位源端口号，16 位目的端口号。（换算方式是 8 位一个字节，所以也可以说是 2 个字节的源端口号和 2 个字节的目的端口号，这里就是 4 个字节，下面不再赘述。）</li><li>32 位序号/4 个字节</li><li>32 位确认序号/4 个字节</li><li>4 位头部长度+6 位保留+6 位标志位，16 位窗口大小。/4 个字节</li><li>16 位校验和，16 位紧急指针。/4 个字节。<br>以上全部加起来就是 20 个字节。</li><li>最后还有一个，选项 option，长度可变，最长可达 4 个字节，通常不启用的情况下，TCP 头部就是 20 个字节。</li></ul></li></ul><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><ul><li>UDP 又称用户数据包协议，是无连接的协议，尽最大努力交付，但不保证可靠。UDP 头部的 8 个字节从上到下依次为：<ul><li>16 位源端口号，16 位目的端口号。/4 个字节</li><li>16 位 UDP 长度，16 位校验和。/4 个字节。</li><li>这里需要一提的是，在计算校验和的时候，我们会在 UDP 头部再加上一截 12 字节长度的伪首部，这个伪首部仅是用来辅助计算校验和的，不会向下或者向上递交，所以我们传输的时候看到的还是 8 个字节。</li></ul></li></ul><h3 id="TCP-和-UDP-的区别"><a href="#TCP-和-UDP-的区别" class="headerlink" title="TCP 和 UDP 的区别"></a>TCP 和 UDP 的区别</h3><p>1、TCP 是面向连接的可靠传输，UDP 是无连接的传输不保证可靠交付。<br>2、TCP 通常是用在文件传输，网络会话，发送接收邮件这些地方，UDP 用在语音，视频还有直播这些地方。<br>3、然后 TCP 只支持一对一的连接，UDP 就没那么多限制，一对一，一对多，多对多都可以。<br>4、UDP 分组首部开销比较小，只要八个字节，TCP 要二十个字节。<br>5、就是 TCP 是面向字节流的，它是把一连串数据转成字节流进行传输，而 UDP 是面向报文的，报文是它的最小分割单位。</p><p>-</p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h2 id="网络接口层"><a href="#网络接口层" class="headerlink" title="网络接口层"></a>网络接口层</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;计算机网络的知识浩瀚如海，迫于时间没能够一本一本细读，只在有需要的时候才翻阅查找，现做个笔记总结一下常见的知识&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;TCP-IP-协议结构&quot;&gt;&lt;a href=&quot;#TCP-IP-协议结构&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Introduction</title>
    <link href="http://yoursite.com/2020/07/21/hello-world/"/>
    <id>http://yoursite.com/2020/07/21/hello-world/</id>
    <published>2020-07-21T10:54:10.778Z</published>
    <updated>2020-10-20T04:59:28.309Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Some-of-my-thoughts"><a href="#Some-of-my-thoughts" class="headerlink" title="Some of my thoughts"></a>Some of my thoughts</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Some-of-my-thoughts&quot;&gt;&lt;a href=&quot;#Some-of-my-thoughts&quot; class=&quot;headerlink&quot; title=&quot;Some of my thoughts&quot;&gt;&lt;/a&gt;Some of my thoughts&lt;/h3&gt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
